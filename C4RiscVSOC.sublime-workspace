{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "C4RiscVSOCTop.vhd",
			"settings":
			{
				"buffer_size": 49230,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"",
					"AQAAAAAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "dvid.vhd",
			"settings":
			{
				"buffer_size": 4266,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAqhAAAAAAAAD1DwAALS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gRW5naW5lZXI6ICAgICAgTWlrZSBGaWVsZCA8aGFtc3RlckBzbmFwLm5ldC5uej4KLS0gRGVzY3JpcHRpb246ICAgQ29udmVydHMgVkdBIHNpZ25hbHMgaW50byBEVklEIGJpdHN0cmVhbXMuCi0tCi0tICAgICAgICAgICAgICAgICdjbGsnIGFuZCAnY2xrX24nIHNob3VsZCBiZSA1eCBjbGtfcGl4ZWwuCi0tCi0tICAgICAgICAgICAgICAgICdibGFuaycgc2hvdWxkIGJlIGFzc2VydGVkIGR1cmluZyB0aGUgbm9uLWRpc3BsYXkgCi0tICAgICAgICAgICAgICAgIHBvcnRpb25zIG9mIHRoZSBmcmFtZQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpsaWJyYXJ5IElFRUU7CnVzZSBJRUVFLlNURF9MT0dJQ18xMTY0LkFMTDsKLS1MaWJyYXJ5IFVOSVNJTTsKLS11c2UgVU5JU0lNLnZjb21wb25lbnRzLmFsbDsKCmVudGl0eSBkdmlkIGlzCiAgICBQb3J0ICggY2xrICAgICAgIDogaW4gIFNURF9MT0dJQzsKICAgICAgICAgICBjbGtfcGl4ZWwgOiBpbiAgU1REX0xPR0lDOwogICAgICAgICAgIHJlZF9wICAgICA6IGluICBTVERfTE9HSUNfVkVDVE9SICg3IGRvd250byAwKTsKICAgICAgICAgICBncmVlbl9wICAgOiBpbiAgU1REX0xPR0lDX1ZFQ1RPUiAoNyBkb3dudG8gMCk7CiAgICAgICAgICAgYmx1ZV9wICAgIDogaW4gIFNURF9MT0dJQ19WRUNUT1IgKDcgZG93bnRvIDApOwogICAgICAgICAgIGJsYW5rICAgICA6IGluICBTVERfTE9HSUM7CiAgICAgICAgICAgaHN5bmMgICAgIDogaW4gIFNURF9MT0dJQzsKICAgICAgICAgICB2c3luYyAgICAgOiBpbiAgU1REX0xPR0lDOwogICAgICAgICAgIHJlZF9zICAgICA6IG91dCBTVERfTE9HSUM7CiAgICAgICAgICAgZ3JlZW5fcyAgIDogb3V0IFNURF9MT0dJQzsKICAgICAgICAgICBibHVlX3MgICAgOiBvdXQgU1REX0xPR0lDOwogICAgICAgICAgIGNsb2NrX3MgICA6IG91dCBTVERfTE9HSUMpOwplbmQgZHZpZDsKCmFyY2hpdGVjdHVyZSBCZWhhdmlvcmFsIG9mIGR2aWQgaXMKICAgQ09NUE9ORU5UIFRETVNfZW5jb2RlcgogICBQT1JUKAogICAgICBjbGsgICAgIDogSU4gIHN0ZF9sb2dpYzsKICAgICAgZGF0YSAgICA6IElOICBzdGRfbG9naWNfdmVjdG9yKDcgZG93bnRvIDApOwogICAgICBjICAgICAgIDogSU4gIHN0ZF9sb2dpY192ZWN0b3IoMSBkb3dudG8gMCk7CiAgICAgIGJsYW5rICAgOiBJTiAgc3RkX2xvZ2ljOyAgICAgICAgICAKICAgICAgZW5jb2RlZCA6IE9VVCBzdGRfbG9naWNfdmVjdG9yKDkgZG93bnRvIDApCiAgICAgICk7CiAgIEVORCBDT01QT05FTlQ7CgoJCgljb21wb25lbnQgZGRyT3V0cHV0IElTCglQT1JUCgkoCgkJZGF0YWluX2gJCTogSU4gU1REX0xPR0lDX1ZFQ1RPUiAoMCBET1dOVE8gMCk7CgkJZGF0YWluX2wJCTogSU4gU1REX0xPR0lDX1ZFQ1RPUiAoMCBET1dOVE8gMCk7CgkJb3V0Y2xvY2sJCTogSU4gU1REX0xPR0lDIDsKCQlkYXRhb3V0CQk6IE9VVCBTVERfTE9HSUNfVkVDVE9SICgwIERPV05UTyAwKQoJKTsKCUVORCBjb21wb25lbnQ7CgogICBzaWduYWwgZW5jb2RlZF9yZWQsIGVuY29kZWRfZ3JlZW4sIGVuY29kZWRfYmx1ZSA6IHN0ZF9sb2dpY192ZWN0b3IoOSBkb3dudG8gMCk7CiAgIHNpZ25hbCBsYXRjaGVkX3JlZCwgbGF0Y2hlZF9ncmVlbiwgbGF0Y2hlZF9ibHVlIDogc3RkX2xvZ2ljX3ZlY3Rvcig5IGRvd250byAwKSA6PSAob3RoZXJzID0+ICcwJyk7CiAgIHNpZ25hbCBzaGlmdF9yZWQsICAgc2hpZnRfZ3JlZW4sICAgc2hpZnRfYmx1ZSAgIDogc3RkX2xvZ2ljX3ZlY3Rvcig5IGRvd250byAwKSA6PSAob3RoZXJzID0+ICcwJyk7CiAgIAogICBzaWduYWwgc2hpZnRfY2xvY2sgICA6IHN0ZF9sb2dpY192ZWN0b3IoOSBkb3dudG8gMCkgOj0gIjAwMDAwMTExMTEiOwoKICAgCiAgIGNvbnN0YW50IGNfcmVkICAgICAgIDogc3RkX2xvZ2ljX3ZlY3RvcigxIGRvd250byAwKSA6PSAob3RoZXJzID0+ICcwJyk7CiAgIGNvbnN0YW50IGNfZ3JlZW4gICAgIDogc3RkX2xvZ2ljX3ZlY3RvcigxIGRvd250byAwKSA6PSAob3RoZXJzID0+ICcwJyk7CiAgIHNpZ25hbCAgIGNfYmx1ZSAgICAgIDogc3RkX2xvZ2ljX3ZlY3RvcigxIGRvd250byAwKTsKCmJlZ2luICAgCiAgIGNfYmx1ZSA8PSB2c3luYyAmIGhzeW5jOwogICAKICAgVERNU19lbmNvZGVyX3JlZDogICBURE1TX2VuY29kZXIgUE9SVCBNQVAoY2xrID0+IGNsa19waXhlbCwgZGF0YSA9PiByZWRfcCwgICBjID0+IGNfcmVkLCAgIGJsYW5rID0+IGJsYW5rLCBlbmNvZGVkID0+IGVuY29kZWRfcmVkKTsKICAgVERNU19lbmNvZGVyX2dyZWVuOiBURE1TX2VuY29kZXIgUE9SVCBNQVAoY2xrID0+IGNsa19waXhlbCwgZGF0YSA9PiBncmVlbl9wLCBjID0+IGNfZ3JlZW4sIGJsYW5rID0+IGJsYW5rLCBlbmNvZGVkID0+IGVuY29kZWRfZ3JlZW4pOwogICBURE1TX2VuY29kZXJfYmx1ZTogIFRETVNfZW5jb2RlciBQT1JUIE1BUChjbGsgPT4gY2xrX3BpeGVsLCBkYXRhID0+IGJsdWVfcCwgIGMgPT4gY19ibHVlLCAgYmxhbmsgPT4gYmxhbmssIGVuY29kZWQgPT4gZW5jb2RlZF9ibHVlKTsKCglkZHJPdXRwdXRDbG9ja0luc3Q6IGRkck91dHB1dAoJcG9ydCBtYXAKCSgKCQlkYXRhaW5faCgwKQkJPT4gc2hpZnRfY2xvY2soMCksCgkJZGF0YWluX2woMCkJCT0+IHNoaWZ0X2Nsb2NrKDEpLAoJCW91dGNsb2NrCQkJPT4gY2xrLAoJCWRhdGFvdXQoMCkJCT0+IGNsb2NrX3MKCSk7CgkKCWRkck91dHB1dFJlZEluc3Q6IGRkck91dHB1dAoJcG9ydCBtYXAKCSgKCQlkYXRhaW5faCgwKQkJPT4gc2hpZnRfcmVkKDApLAoJCWRhdGFpbl9sKDApCQk9PiBzaGlmdF9yZWQoMSksCgkJb3V0Y2xvY2sJCQk9PiBjbGssCgkJZGF0YW91dCgwKQkJPT4gcmVkX3MKCSk7CgkKCWRkck91dHB1dEdyZWVuSW5zdDogZGRyT3V0cHV0Cglwb3J0IG1hcAoJKAoJCWRhdGFpbl9oKDApCQk9PiBzaGlmdF9ncmVlbigwKSwKCQlkYXRhaW5fbCgwKQkJPT4gc2hpZnRfZ3JlZW4oMSksCgkJb3V0Y2xvY2sJCQk9PiBjbGssCgkJZGF0YW91dCgwKQkJPT4gZ3JlZW5fcwoJKTsKCglkZHJPdXRwdXRCbHVlSW5zdDogZGRyT3V0cHV0Cglwb3J0IG1hcAoJKAoJCWRhdGFpbl9oKDApCQk9PiBzaGlmdF9ibHVlKDApLAoJCWRhdGFpbl9sKDApCQk9PiBzaGlmdF9ibHVlKDEpLAoJCW91dGNsb2NrCQkJPT4gY2xrLAoJCWRhdGFvdXQoMCkJCT0+IGJsdWVfcwoJKTsKCiAgIHByb2Nlc3MoY2xrX3BpeGVsKQogICBiZWdpbgogICAgICBpZiByaXNpbmdfZWRnZShjbGtfcGl4ZWwpIHRoZW4gCiAgICAgICAgICAgIGxhdGNoZWRfcmVkICAgPD0gZW5jb2RlZF9yZWQ7CiAgICAgICAgICAgIGxhdGNoZWRfZ3JlZW4gPD0gZW5jb2RlZF9ncmVlbjsKICAgICAgICAgICAgbGF0Y2hlZF9ibHVlICA8PSBlbmNvZGVkX2JsdWU7CiAgICAgIGVuZCBpZjsKICAgZW5kIHByb2Nlc3M7CgogICBwcm9jZXNzKGNsaykKICAgYmVnaW4KICAgICAgaWYgcmlzaW5nX2VkZ2UoY2xrKSB0aGVuIAogICAgICAgICBpZiBzaGlmdF9jbG9jayA9ICIwMDAwMDExMTExIiB0aGVuCiAgICAgICAgICAgIHNoaWZ0X3JlZCAgIDw9IGxhdGNoZWRfcmVkOwogICAgICAgICAgICBzaGlmdF9ncmVlbiA8PSBsYXRjaGVkX2dyZWVuOwogICAgICAgICAgICBzaGlmdF9ibHVlICA8PSBsYXRjaGVkX2JsdWU7CiAgICAgICAgIGVsc2UKICAgICAgICAgICAgc2hpZnRfcmVkICAgPD0gIjAwIiAmIHNoaWZ0X3JlZCAgKDkgZG93bnRvIDIpOwogICAgICAgICAgICBzaGlmdF9ncmVlbiA8PSAiMDAiICYgc2hpZnRfZ3JlZW4oOSBkb3dudG8gMik7CiAgICAgICAgICAgIHNoaWZ0X2JsdWUgIDw9ICIwMCIgJiBzaGlmdF9ibHVlICg5IGRvd250byAyKTsKICAgICAgICAgZW5kIGlmOwogICAgICAgICBzaGlmdF9jbG9jayA8PSBzaGlmdF9jbG9jaygxIGRvd250byAwKSAmIHNoaWZ0X2Nsb2NrKDkgZG93bnRvIDIpOwogICAgICBlbmQgaWY7CiAgIGVuZCBwcm9jZXNzOwogICAKZW5kIEJlaGF2aW9yYWw7Cgo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "gouraudEdge.vhd",
			"settings":
			{
				"buffer_size": 1659,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAewYAAAAAAABSBQAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19zaWduZWQuYWxsOwoKZW50aXR5IGdvdXJhdWRFZGdlIGlzCgpwb3J0KAoJLS1yZXNldAoJIHJlc2V0OiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gIHN0ZF9sb2dpYzsKICAgIGNsb2NrOiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gIHN0ZF9sb2dpYzsKCQoJIGUxX3g6CQkJCQkJCQkJaW4gc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCSBlMV95OgkJCQkJCQkJCWluIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgkgCgkgZTJfeDoJCQkJCQkJCQlpbiBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoJIGUyX3k6CQkJCQkJCQkJaW4gc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCgkgcF94OgkJCQkJCQkJCQlpbiBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoJIHBfeToJCQkJCQkJCQkJaW4gc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCgkgCgkgZWRnZToJCQkJCQkJCQlvdXQgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKQopOwoKZW5kIGdvdXJhdWRFZGdlOwoKYXJjaGl0ZWN0dXJlIGJlaGF2aW9yIG9mIGdvdXJhdWRFZGdlIGlzCgpzaWduYWwJYV94OglzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwpzaWduYWwJYV95OglzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoKc2lnbmFsCWJfeDoJc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKc2lnbmFsCWJfeToJc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCnNpZ25hbAlsZWZ0TXVsdDogc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsCXJpZ2h0TXVsdDogc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCmJlZ2luCgptYWluOiBwcm9jZXNzKCBhbGwgKQoKYmVnaW4KCglpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCgkKCQlpZiByZXNldCA9ICcxJyB0aGVuCgkJCgkJCgkJZWxzZQoJCQoJCQlhX3gJCQk8PSBwX3ggLSBlMV94OwoJCQlhX3kJCQk8PSBwX3kgLSBlMV95OwoJCQkKCQkJYl94CQkJPD0gZTJfeCAtIGUxX3g7CgkJCWJfeQkJCTw9IGUyX3kgLSBlMV95OwoJCQkKCQkJbGVmdE11bHQJCTw9IGFfeCAqIGJfeTsKCQkJcmlnaHRNdWx0CTw9IGFfeSAqIGJfeDsKCQkJCgkJCWVkZ2UJCQk8PSBsZWZ0TXVsdCAtIHJpZ2h0TXVsdDsKCQkJCgkJZW5kIGlmOyAtLXJlc2V0ID0gJzEnCgkKCWVuZCBpZjsgLS1yaXNpbmdfZWRnZSggY2xvY2sgKQoKZW5kIHByb2Nlc3M7CgoKCmVuZCBiZWhhdmlvcjsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "gouraudIterator.vhd",
			"settings":
			{
				"buffer_size": 1363,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAUwUAAAAAAACXBAAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CgplbnRpdHkgZ291cmF1ZEl0ZXJhdG9yIGlzCgpwb3J0KAoJLS1yZXNldAoJIHJlc2V0OiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gIHN0ZF9sb2dpYzsKICAgIGNsb2NrOiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gIHN0ZF9sb2dpYzsKCSAJIAoJIHdlaWdodENCOgkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7Cgkgd2VpZ2h0QUM6CQkJCQkJCQlpbiAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCSB3ZWlnaHRCQToJCQkJCQkJCWluICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoKCSB2YWxBOgkJCQkJCQkJCWluICBzdGRfbG9naWNfdmVjdG9yKCA3IGRvd250byAwICk7CgkgdmFsQjoJCQkJCQkJCQlpbiAgc3RkX2xvZ2ljX3ZlY3RvciggNyBkb3dudG8gMCApOwoJIHZhbEM6CQkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDcgZG93bnRvIDAgKTsKCgkgdmFsT3V0OgkJCQkJCQkJCW91dCBzdGRfbG9naWNfdmVjdG9yKCA3IGRvd250byAwICkKKTsKCmVuZCBnb3VyYXVkSXRlcmF0b3I7CgphcmNoaXRlY3R1cmUgYmVoYXZpb3Igb2YgZ291cmF1ZEl0ZXJhdG9yIGlzCgpzaWduYWwgbXVsMToJc3RkX2xvZ2ljX3ZlY3RvciggMjMgZG93bnRvIDAgKTsKc2lnbmFsIG11bDI6CXN0ZF9sb2dpY192ZWN0b3IoIDIzIGRvd250byAwICk7CnNpZ25hbCBtdWwzOglzdGRfbG9naWNfdmVjdG9yKCAyMyBkb3dudG8gMCApOwoKYmVnaW4KCm1haW46IHByb2Nlc3MoIGFsbCApCgp2YXJpYWJsZSBzdW06CQlzdGRfbG9naWNfdmVjdG9yKCAyMyBkb3dudG8gMCApOwoKYmVnaW4KCglpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCgkKCQltdWwxIDw9CXdlaWdodENCICogdmFsQTsKCQltdWwyIDw9CXdlaWdodEFDICogdmFsQjsKCQltdWwzIDw9CXdlaWdodEJBICogdmFsQzsKCQoJCXN1bQk6PSBtdWwxICsgbXVsMiArIG11bDM7CgkJCgkJdmFsT3V0IDw9IHN1bSggMTUgZG93bnRvIDggKTsKCQkKCWVuZCBpZjsgLS0gcmlzaW5nX2VkZ2UoIGNsb2NrICkKCQplbmQgcHJvY2VzczsKCgoKZW5kIGJlaGF2aW9yOwo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "gouraudIterator16.vhd",
			"settings":
			{
				"buffer_size": 1373,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAXQUAAAAAAAChBAAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CgplbnRpdHkgZ291cmF1ZEl0ZXJhdG9yMTYgaXMKCnBvcnQoCgktLXJlc2V0CgkgcmVzZXQ6ICAgICAgICAgICAgICAgICAgICAgICAgICBpbiAgc3RkX2xvZ2ljOwogICAgY2xvY2s6ICAgICAgICAgICAgICAgICAgICAgICAgICBpbiAgc3RkX2xvZ2ljOwoJIAkgCgkgd2VpZ2h0Q0I6CQkJCQkJCQlpbiAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCSB3ZWlnaHRBQzoJCQkJCQkJCWluICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoJIHdlaWdodEJBOgkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgoJIHZhbEE6CQkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgkgdmFsQjoJCQkJCQkJCQlpbiAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCSB2YWxDOgkJCQkJCQkJCWluICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoKCSB2YWxPdXQ6CQkJCQkJCQkJb3V0IHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICkKKTsKCmVuZCBnb3VyYXVkSXRlcmF0b3IxNjsKCmFyY2hpdGVjdHVyZSBiZWhhdmlvciBvZiBnb3VyYXVkSXRlcmF0b3IxNiBpcwoKc2lnbmFsIG11bDE6CXN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CnNpZ25hbCBtdWwyOglzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwpzaWduYWwgbXVsMzoJc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCmJlZ2luCgptYWluOiBwcm9jZXNzKCBhbGwgKQoKdmFyaWFibGUgc3VtOgkJc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCmJlZ2luCgoJaWYgcmlzaW5nX2VkZ2UoIGNsb2NrICkgdGhlbgoJCgkJbXVsMSA8PQl3ZWlnaHRDQiAqIHZhbEE7CgkJbXVsMiA8PQl3ZWlnaHRBQyAqIHZhbEI7CgkJbXVsMyA8PQl3ZWlnaHRCQSAqIHZhbEM7CgkKCQlzdW0JOj0gbXVsMSArIG11bDIgKyBtdWwzOwoJCQoJCXZhbE91dCA8PSBzdW0oIDIzIGRvd250byA4ICk7CgkJCgllbmQgaWY7IC0tIHJpc2luZ19lZGdlKCBjbG9jayApCgkKZW5kIHByb2Nlc3M7CgoKCmVuZCBiZWhhdmlvcjsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "gouraudWeight.vhd",
			"settings":
			{
				"buffer_size": 1493,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAA1QUAAAAAAAAnBQAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19zaWduZWQuYWxsOwoKZW50aXR5IGdvdXJhdWRXZWlnaHQgaXMKCnBvcnQoCgktLXJlc2V0CgkgcmVzZXQ6ICAgICAgICAgICAgICAgICAgICAgICAgICBpbiAgc3RkX2xvZ2ljOwogICAgY2xvY2s6ICAgICAgICAgICAgICAgICAgICAgICAgICBpbiAgc3RkX2xvZ2ljOwoJIAoJIGVkZ2U6CQkJCQkJCQkJaW4gc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCSBhcmVhOgkJCQkJCQkJCWluIHN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CgkgCgkgd2VpZ2h0OgkJCQkJCQkJCW91dCBzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApCgopOwoKZW5kIGdvdXJhdWRXZWlnaHQ7CgphcmNoaXRlY3R1cmUgYmVoYXZpb3Igb2YgZ291cmF1ZFdlaWdodCBpcwoKCmNvbXBvbmVudCBkaXZpZGVyMzJzIGlzCglwb3J0CgkoCgkJZGVub20JCTogSU4gU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApOwoJCW51bWVyCQk6IElOIFNURF9MT0dJQ19WRUNUT1IgKDMxIERPV05UTyAwKTsKCQlxdW90aWVudAkJOiBPVVQgU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApOwoJCXJlbWFpbgkJOiBPVVQgU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApCgkpOwplbmQgY29tcG9uZW50OwoKCmNvbXBvbmVudCBkaXZpZGVyU3RhZ2VkIElTCglQT1JUCgkoCgkJY2xvY2sJCTogSU4gU1REX0xPR0lDIDsKCQlkZW5vbQkJOiBJTiBTVERfTE9HSUNfVkVDVE9SICgzMSBET1dOVE8gMCk7CgkJbnVtZXIJCTogSU4gU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApOwoJCXF1b3RpZW50CQk6IE9VVCBTVERfTE9HSUNfVkVDVE9SICgzMSBET1dOVE8gMCk7CgkJcmVtYWluCQk6IE9VVCBTVERfTE9HSUNfVkVDVE9SICgzMSBET1dOVE8gMCkKCSk7CkVORCBjb21wb25lbnQ7CgpiZWdpbgoKZGl2aWRlcjMyc0luc3Q6IGRpdmlkZXIzMnMKCXBvcnQgbWFwKAoKCQludW1lcgkJPT4gZWRnZSggMjMgZG93bnRvIDAgKSAmIHgiMDAiLAoKCQoJCWRlbm9tCQk9PiBhcmVhLAoJCXF1b3RpZW50CT0+IHdlaWdodAoJKTsKCi0tZGl2aWRlclN0YWdlZEluc3Q6IGRpdmlkZXJTdGFnZWQKLS0JcG9ydCBtYXAoCi0tCQotLQkJY2xvY2sJCT0+IGNsb2NrLAotLQkJbnVtZXIJCT0+IGVkZ2UoIDIzIGRvd250byAwICkgJiB4IjAwIiwKLS0JCi0tCQlkZW5vbQkJPT4gYXJlYSwKLS0JCXF1b3RpZW50CT0+IHdlaWdodAotLQkKLS0JKTsKLS0JCgkKZW5kIGJlaGF2aW9yOwo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "InputSync.vhd",
			"settings":
			{
				"buffer_size": 1166,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAjgQAAAAAAACMBAAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CnVzZSBpZWVlLm51bWVyaWNfc3RkLmFsbDsKCmVudGl0eSBpbnB1dFN5bmMgaXMKCmdlbmVyaWMoCgogICAgaW5wdXRXaWR0aCAgICAgICAgICAgICAgOiBpbnRlZ2VyIDo9IDEKCik7Cgpwb3J0KAoKICAgIGNsb2NrOiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gIHN0ZF9sb2dpYzsKCiAgICBzaWduYWxJbnB1dDogICAgICAgICAgICAgICAgICAgIGluICBzdGRfbG9naWNfdmVjdG9yKCBpbnB1dFdpZHRoIC0gMSBkb3dudG8gMCApOwogICAgc2lnbmFsT3V0cHV0OiAgICAgICAgICAgICAgICAgICBvdXQgc3RkX2xvZ2ljX3ZlY3RvciggaW5wdXRXaWR0aCAtIDEgZG93bnRvIDAgKQoKKTsKCmVuZCBpbnB1dFN5bmM7CgphcmNoaXRlY3R1cmUgYmVoYXZpb3Igb2YgaW5wdXRTeW5jIGlzCgpjb25zdGFudCBzaWduYWxXaWR0aDoJaW50ZWdlciA6PSBpbnB1dFdpZHRoIC0gMTsKCnNpZ25hbCBzdGFnZTFSZWc6ICAgc3RkX2xvZ2ljX3ZlY3Rvciggc2lnbmFsV2lkdGggZG93bnRvIDAgKTsKc2lnbmFsIHN0YWdlMlJlZzogICBzdGRfbG9naWNfdmVjdG9yKCBzaWduYWxXaWR0aCBkb3dudG8gMCApOwpzaWduYWwgc3RhZ2UzUmVnOiAgIHN0ZF9sb2dpY192ZWN0b3IoIHNpZ25hbFdpZHRoIGRvd250byAwICk7CgoKYmVnaW4KCgpzaWduYWxPdXRwdXQgPD0gc3RhZ2UzUmVnOwoKc3RhZ2UxOiBwcm9jZXNzKCBhbGwgKQpiZWdpbgoKICAgIGlmIHJpc2luZ19lZGdlKCBjbG9jayApIHRoZW4KCiAgICAgICAgc3RhZ2UxUmVnIDw9IHNpZ25hbElucHV0OwoKICAgIGVuZCBpZjsKCmVuZCBwcm9jZXNzOwoKc3RhZ2UyOiBwcm9jZXNzKCBhbGwgKQpiZWdpbgoKICAgIGlmIHJpc2luZ19lZGdlKCBjbG9jayApIHRoZW4KCiAgICAgICAgc3RhZ2UyUmVnIDw9IHN0YWdlMVJlZzsKCiAgICBlbmQgaWY7CgplbmQgcHJvY2VzczsKCnN0YWdlMzogcHJvY2VzcyggYWxsICkKYmVnaW4KCiAgICBpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCgogICAgICAgIHN0YWdlM1JlZyA8PSBzdGFnZTJSZWc7CgogICAgZW5kIGlmOwoKZW5kIHByb2Nlc3M7CgoKCmVuZCBiZWhhdmlvcjsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "spi.vhd",
			"settings":
			{
				"buffer_size": 8330,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAiiAAAAAAAABLFgAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CnVzZSBpZWVlLm51bWVyaWNfc3RkLmFsbDsKCmVudGl0eSBTUEkgaXMKcG9ydCgKCgktLWNwdSBpbnRlcmZhY2UKCXJlc2V0OiAgICAgIGluICBzdGRfbG9naWM7CgljbG9jazogICAgICBpbiAgc3RkX2xvZ2ljOwoKCWE6CQkJCWluIAlzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoJZGluOgkJCWluIAlzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwoJZG91dDoJCQlvdXQJc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCQoJY2U6CQkJaW4JCXN0ZF9sb2dpYzsKCXdyOgkJCWluCQlzdGRfbG9naWM7CglkYXRhTWFzazoJaW4JCXN0ZF9sb2dpY192ZWN0b3IoIDMgZG93bnRvIDAgKTsKCQoJcmVhZHk6CQlvdXQJc3RkX2xvZ2ljOwoJCgktLXNwaSBpbnRlcmZhY2UKCXNjbGs6CQkJb3V0IHN0ZF9sb2dpYzsKCW1vc2k6CQkJb3V0IHN0ZF9sb2dpYzsKCW1pc286CQkJaW4gIHN0ZF9sb2dpYwoJCik7CmVuZCBTUEk7CgphcmNoaXRlY3R1cmUgYmVoYXZpb3Igb2YgU1BJIGlzCgoKc2lnbmFsIHR4QnVmZmVyOiAJCQkJc3RkX2xvZ2ljX3ZlY3RvciggNyBkb3dudG8gMCApOwpzaWduYWwgcnhCdWZmZXI6IAkJCQlzdGRfbG9naWNfdmVjdG9yKCA3IGRvd250byAwICk7CgpzaWduYWwgbWlzb1N5bmM6IAkJCQlzdGRfbG9naWM7CgpzaWduYWwgc3BpUmVhZHk6CQkJCXN0ZF9sb2dpYzsKc2lnbmFsIGRhdGFUb1NlbmQ6CQkJc3RkX2xvZ2ljX3ZlY3RvciggNyBkb3dudG8gMCApOwpzaWduYWwgZGF0YVJlY2VpdmVkOgkJCXN0ZF9sb2dpY192ZWN0b3IoIDcgZG93bnRvIDAgKTsKc2lnbmFsIGRhdGFUb1NlbmRTdHJvYmU6CXN0ZF9sb2dpYzsKCgp0eXBlIHNwaVN0YXRlX3QgaXMgKCBzcGlJZGxlLCBzcGlXYWl0Rm9yU3Ryb2JlUmVsZWFzZSwgc3BpQjdMLCBzcGlCN0gsIHNwaUI2TCwgc3BpQjZILCBzcGlCNUwsIHNwaUI1SCwgc3BpQjRMLCAKCQkJCQkJCXNwaUI0SCwgc3BpQjNMLCBzcGlCM0gsIHNwaUIyTCwgc3BpQjJILCBzcGlCMUwsIHNwaUIxSCwgc3BpQjBMLCBzcGlCMEggKTsKCQkJCQkJIApzaWduYWwgc3BpU3RhdGU6CQkJCXNwaVN0YXRlX3Q7CgoKdHlwZSBSZWdTdGF0ZV9UIGlzICggcnNXYWl0Rm9yUmVnQWNjZXNzLCByc1dhaXRGb3JCdXNDeWNsZUVuZCApOwoKc2lnbmFsIHJlZ1N0YXRlOgkJCQlSZWdTdGF0ZV9UOwoKYmVnaW4KCgoKcmVnaXN0ZXJzOiBwcm9jZXNzKCBhbGwgKQpiZWdpbgoKCWlmIHJpc2luZ19lZGdlKCBjbG9jayApIHRoZW4KCQoJCWlmIHJlc2V0ID0gJzEnIHRoZW4KCQkKCQkJZGF0YVRvU2VuZFN0cm9iZQkJPD0gJzAnOwoJCQoJCQlyZWFkeQkJCQkJCTw9ICcwJzsJCgkJCXJlZ1N0YXRlCQkJCQk8PSByc1dhaXRGb3JSZWdBY2Nlc3M7CgkJCQoJCWVsc2UKCQkKCQkJZGF0YVRvU2VuZFN0cm9iZQk8PSAnMCc7CgkJCQoJCQljYXNlIHJlZ1N0YXRlIGlzCgkKCQkJCXdoZW4gcnNXYWl0Rm9yUmVnQWNjZXNzID0+CgkJCQoJCQkJCWlmIGNlID0gJzEnIHRoZW4KCQkJCQkKCQkJCQkJLS1jcHUgd2FudHMgdG8gYWNjZXNzIHJlZ2lzdGVycwoJCQkJCQoJCQkJCQlyZWFkeSA8PSAnMCc7CgkJCQkJCQoJCQkJCQljYXNlIGEoIDcgZG93bnRvIDAgKSBpcwoJCQkJCQkKCQkJCQkJCS0tMHgwMCBydyBzcGlEYXRhCQkJCQkJCQkKCQkJCQkJCXdoZW4geCIwMCIgPT4KCQkJCQkJCQoJCQkJCQkJCWRvdXQJPD0geCIwMDAwIiAmICB4IjAwIiAmIGRhdGFSZWNlaXZlZDsKCQkJCQkJCQkKCQkJCQkJCQlpZiB3ciA9ICcxJyB0aGVuCgkJCQkJCQkJCgkJCQkJCQkJCWRhdGFUb1NlbmQJCQk8PSBkaW4oIDcgZG93bnRvIDAgKTsKCQkJCQkJCQkJZGF0YVRvU2VuZFN0cm9iZQk8PSAnMSc7CgkJCQkJCQkJCQoJCQkJCQkJCWVuZCBpZjsKCgkJCQkJCQkJcmVhZHkJPD0gJzEnOwoJCQkJCQkJCQoJCQkJCQkJLS0weDA0IHItIHNwaVN0YXR1cwkJCQkJCQkJCgkJCQkJCQl3aGVuIHgiMDEiID0+CgkJCQkJCQkKCQkJCQkJCQlkb3V0CTw9IHgiMDAwMCIgJiAiMDAwMDAwMDAwMDAwMDAwIiAmIHNwaVJlYWR5OwoJCQkJCQkJCQoJCQkJCQkJCXJlYWR5CTw9ICcxJzsKCgkJCQkJCQl3aGVuIG90aGVycyA9PgoJCQkJCQkJCgkJCQkJCQkJZG91dAk8PSAoIG90aGVycyA9PicwJyApOwoJCQkJCQkJCXJlYWR5CTw9ICcxJzsKCQkJCQkJCgkJCQkJCWVuZCBjYXNlOyAtLWEKCQkJCQkKCQkJCQkJcmVnU3RhdGUgPD0gcnNXYWl0Rm9yQnVzQ3ljbGVFbmQ7CgkJCQkJCgkJCQkJZW5kIGlmOyAtLWNlID0gJzEnCgkJCQkJCQkJCgkJCQkKCQkJCXdoZW4gcnNXYWl0Rm9yQnVzQ3ljbGVFbmQgPT4KCQkJCQoJCQkJCS0td2FpdCBmb3IgYnVzIGN5Y2xlIHRvIGVuZAoJCQkJCWlmIGNlID0gJzAnIHRoZW4KCQkJCQkKCQkJCQkJcmVnU3RhdGUgPD0gcnNXYWl0Rm9yUmVnQWNjZXNzOwoJCQkJCQlyZWFkeQk8PSAnMCc7CgkJCQkJCQoJCQkJCWVuZCBpZjsKCQkJCQkKCQkJCXdoZW4gb3RoZXJzID0+CgkJCQkKCQkJCQlyZWdTdGF0ZSA8PSByc1dhaXRGb3JSZWdBY2Nlc3M7CgkJCQoJCQllbmQgY2FzZTsgLS1zdGF0ZQoJCgkJZW5kIGlmOyAtLXJlc2V0ID0gJzEnCgkKCWVuZCBpZjsgLS1yaXNpbmdfZWRnZSggY2xvY2sgKQoKZW5kIHByb2Nlc3M7CgoKCW1pc29TeW5jCTw9IG1pc287CgkKc3BpSW50ZXJmYWNlOiBwcm9jZXNzKCBhbGwgKQoKYmVnaW4KCglpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCgkKCQoJCWlmIHJlc2V0ID0gJzEnIHRoZW4KCQkKCQkJc3BpU3RhdGUJPD0gc3BpSWRsZTsKCQkJc3BpUmVhZHkJPD0gJzEnOwoKCQkJc2NsawkJPD0gJzAnOwoJCQltb3NpCQk8PSAnMCc7CgkJCXR4QnVmZmVyCTw9ICggb3RoZXJzID0+ICcwJyApOwoJCQlyeEJ1ZmZlcgk8PSAoIG90aGVycyA9PiAnMCcgKTsKCQkJCgkJZWxzZQoJCQoJCQoJCQljYXNlIHNwaVN0YXRlIGlzIAoJCgkJCQl3aGVuIHNwaUlkbGUgPT4KCQkJCQoJCQkJCXNjbGsJCQkJPD0gJzAnOwoJCQkJCXNwaVJlYWR5CQkJPD0gJzEnOwoJCQkJCQoJCQkJCWRhdGFSZWNlaXZlZAk8PSByeEJ1ZmZlcjsKCQkJCQkKCQkJCQlpZiBkYXRhVG9TZW5kU3Ryb2JlID0gJzEnIHRoZW4KCQkJCQkJCgkJCQkJCXR4QnVmZmVyCTw9IGRhdGFUb1NlbmQ7CgkJCQkJCXNwaVJlYWR5CTw9ICcwJzsKCQkJCQkJCgkJCQkJCXNwaVN0YXRlCTw9IHNwaVdhaXRGb3JTdHJvYmVSZWxlYXNlOwoJCQkJCQkKCQkJCQllbmQgaWY7CgkJCQkJCgkJCQl3aGVuIHNwaVdhaXRGb3JTdHJvYmVSZWxlYXNlID0+CgoJCQkJCXNwaVJlYWR5CTw9ICcwJzsKCgkJCQkJc2NsawkJPD0gJzAnOwoJCQkJCgkJCQkJaWYgZGF0YVRvU2VuZFN0cm9iZSA9ICcwJyB0aGVuCgkJCQkJCgkJCQkJCXNwaVN0YXRlCTw9IHNwaUI3TDsKCQkJCQkJCgkJCQkJZW5kIGlmOwoJCQkJCQoJCQkJd2hlbiBzcGlCN0wJPT4KCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoJCQkJCgkJCQkJbW9zaQkJPD0gdHhCdWZmZXIoIDcgKTsKCQkJCQkKCQkJCQlzY2xrCQk8PSAnMCc7CgkJCQkJc3BpU3RhdGUJPD0gc3BpQjdIOwoJCQkJCQoJCQkJd2hlbiBzcGlCN0gJPT4KCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoJCQkJCQoJCQkJCXJ4QnVmZmVyKCA3ICkgPD0gbWlzb1N5bmM7CgkJCQkJCgkJCQkJc2NsawkJPD0gJzEnOwoJCQkJCXNwaVN0YXRlCTw9IHNwaUI2TDsKCQkJCQkKCQkJCXdoZW4gc3BpQjZMCT0+CgkJCQkKCQkJCQltb3NpCQk8PSB0eEJ1ZmZlciggNiApOwoKCQkJCQlzcGlSZWFkeQk8PSAnMCc7CgoJCQkJCXNjbGsJCTw9ICcwJzsKCQkJCQlzcGlTdGF0ZQk8PSBzcGlCNkg7CgkJCQkJCgkJCQl3aGVuIHNwaUI2SAk9PgoJCQkJCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoKCQkJCQlyeEJ1ZmZlciggNiApIDw9IG1pc29TeW5jOwoKCQkJCQlzY2xrCQk8PSAnMSc7CgkJCQkJc3BpU3RhdGUJPD0gc3BpQjVMOwoJCQkJCQoJCQkJd2hlbiBzcGlCNUwJPT4KCQkJCQoJCQkJCW1vc2kJCTw9IHR4QnVmZmVyKCA1ICk7CgoJCQkJCXNwaVJlYWR5CTw9ICcwJzsKCQkJCQoJCQkJCXNjbGsJCTw9ICcwJzsKCQkJCQlzcGlTdGF0ZQk8PSBzcGlCNUg7CgkJCQkJCgkJCQl3aGVuIHNwaUI1SAk9PgoJCQkJCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoKCQkJCQlyeEJ1ZmZlciggNSApIDw9IG1pc29TeW5jOwoKCQkJCQlzY2xrCQk8PSAnMSc7CgkJCQkJc3BpU3RhdGUJPD0gc3BpQjRMOwoJCQkJCQoJCQkJd2hlbiBzcGlCNEwJPT4KCQkJCQoJCQkJCW1vc2kJCTw9IHR4QnVmZmVyKCA0ICk7CgoJCQkJCXNwaVJlYWR5CTw9ICcwJzsKCgkJCQkJc2NsawkJPD0gJzAnOwoJCQkJCXNwaVN0YXRlCTw9IHNwaUI0SDsKCQkJCQkKCQkJCXdoZW4gc3BpQjRICT0+CgkJCQkKCQkJCQlzcGlSZWFkeQk8PSAnMCc7CgoJCQkJCXJ4QnVmZmVyKCA0ICkgPD0gbWlzb1N5bmM7CgoJCQkJCXNjbGsJCTw9ICcxJzsKCQkJCQlzcGlTdGF0ZQk8PSBzcGlCM0w7CgkJCQkJCgkJCQl3aGVuIHNwaUIzTAk9PgoJCQkJCgkJCQkJbW9zaQkJPD0gdHhCdWZmZXIoIDMgKTsKCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoJCQkJCgkJCQkJc2NsawkJPD0gJzAnOwoJCQkJCXNwaVN0YXRlCTw9IHNwaUIzSDsKCQkJCQkKCQkJCXdoZW4gc3BpQjNICT0+CgkJCQkKCQkJCQlyeEJ1ZmZlciggMyApIDw9IG1pc29TeW5jOwoKCQkJCQlzcGlSZWFkeQk8PSAnMCc7CgoJCQkJCXNjbGsJCTw9ICcxJzsKCQkJCQlzcGlTdGF0ZQk8PSBzcGlCMkw7CgkJCQkJCgkJCQl3aGVuIHNwaUIyTAk9PgoJCQkJCgkJCQkJbW9zaQkJPD0gdHhCdWZmZXIoIDIgKTsKCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoJCQkJCgkJCQkJc2NsawkJPD0gJzAnOwoJCQkJCXNwaVN0YXRlCTw9IHNwaUIySDsKCQkJCQkKCQkJCXdoZW4gc3BpQjJICT0+CgoJCQkJCXJ4QnVmZmVyKCAyICkgPD0gbWlzb1N5bmM7CgoJCQkJCXNwaVJlYWR5CTw9ICcwJzsKCQkJCQoJCQkJCXNjbGsJCTw9ICcxJzsKCQkJCQlzcGlTdGF0ZQk8PSBzcGlCMUw7CgkJCQkJCgkJCQl3aGVuIHNwaUIxTAk9PgoJCQkJCgkJCQkJbW9zaQkJPD0gdHhCdWZmZXIoIDEgKTsKCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoKCQkJCQlzY2xrCQk8PSAnMCc7CgkJCQkJc3BpU3RhdGUJPD0gc3BpQjFIOwoJCQkJCQoJCQkJd2hlbiBzcGlCMUgJPT4KCQkJCQoJCQkJCXNwaVJlYWR5CTw9ICcwJzsKCgkJCQkJcnhCdWZmZXIoIDEgKSA8PSBtaXNvU3luYzsKCgkJCQkJc2NsawkJPD0gJzEnOwoJCQkJCXNwaVN0YXRlCTw9IHNwaUIwTDsKCQkJCQkKCQkJCXdoZW4gc3BpQjBMCT0+CgkJCQkKCQkJCQltb3NpCQk8PSB0eEJ1ZmZlciggMCApOwoKCQkJCQlzcGlSZWFkeQk8PSAnMCc7CgoJCQkJCXNjbGsJCTw9ICcwJzsKCQkJCQlzcGlTdGF0ZQk8PSBzcGlCMEg7CgkJCQkJCgkJCQl3aGVuIHNwaUIwSAk9PgoJCQkJCgkJCQkJc3BpUmVhZHkJPD0gJzAnOwoKCQkJCQlyeEJ1ZmZlciggMCApIDw9IG1pc29TeW5jOwoKCQkJCQlzY2xrCQk8PSAnMSc7CgkJCQkJc3BpU3RhdGUJPD0gc3BpSWRsZTsKCQkJCQkKCQkJCQkKCQkJCXdoZW4gb3RoZXJzID0+CgkJCQkKCQkJCQlzcGlTdGF0ZQk8PSBzcGlJZGxlOwoJCQkJCQoJCQllbmQgY2FzZTsJLS1zcGlTdGF0ZSBpcwoJCQkKCQkJCgkJZW5kIGlmOyAtLXJlc2V0ID0gJzEnCgkKCQoJZW5kIGlmOwoKCmVuZCBwcm9jZXNzOwoKCgplbmQgYmVoYXZpb3I7Cg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "sramController.vhd",
			"settings":
			{
				"buffer_size": 20425,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "textureShader.vhd",
			"settings":
			{
				"buffer_size": 1220,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAxAQAAAAAAABkBAAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CgplbnRpdHkgdGV4dHVyZVNoYWRlciBpcwoKcG9ydCgKCS0tcmVzZXQKCSByZXNldDogICAgICAgICAgICAgICAgICAgICAgICAgIGluICBzdGRfbG9naWM7CiAgICBjbG9jazogICAgICAgICAgICAgICAgICAgICAgICAgIGluICBzdGRfbG9naWM7CgkgCSAKCSBjb2xvckluOgkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgkgbGlnaHRJbjoJCQkJCQkJCWluICBzdGRfbG9naWNfdmVjdG9yKCA0IGRvd250byAwICk7CgkgY29sb3JPdXQ6CQkJCQkJCQlvdXQgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKQopOwoKZW5kIHRleHR1cmVTaGFkZXI7CgphcmNoaXRlY3R1cmUgYmVoYXZpb3Igb2YgdGV4dHVyZVNoYWRlciBpcwoKLS1zaWduYWwgbXVscjoJc3RkX2xvZ2ljX3ZlY3RvciggOSBkb3dudG8gMCApOwotLXNpZ25hbCBtdWxnOglzdGRfbG9naWNfdmVjdG9yKCA5IGRvd250byAwICk7Ci0tc2lnbmFsIG11bGI6CXN0ZF9sb2dpY192ZWN0b3IoIDkgZG93bnRvIDAgKTsKCmJlZ2luCgptYWluOiBwcm9jZXNzKCBhbGwgKQoKdmFyaWFibGUgbXVscjoJc3RkX2xvZ2ljX3ZlY3RvciggOSBkb3dudG8gMCApOwp2YXJpYWJsZSBtdWxnOglzdGRfbG9naWNfdmVjdG9yKCA5IGRvd250byAwICk7CnZhcmlhYmxlIG11bGI6CXN0ZF9sb2dpY192ZWN0b3IoIDkgZG93bnRvIDAgKTsKCgpiZWdpbgoKCWlmIHJpc2luZ19lZGdlKCBjbG9jayApIHRoZW4KCQoKCQltdWxyIDo9CWNvbG9ySW4oIDQgZG93bnRvIDAgKSAJKiBsaWdodEluOwoJCW11bGcgOj0JY29sb3JJbiggMTAgZG93bnRvIDYgKSAJKiBsaWdodEluOwoJCW11bGIgOj0JY29sb3JJbiggMTUgZG93bnRvIDExICkJKiBsaWdodEluOwoJCQoJCWNvbG9yT3V0IDw9IG11bGIoIDkgZG93bnRvIDUgKSAmIG11bGcoIDkgZG93bnRvIDUgKSAmICIwIiAmIG11bHIoIDkgZG93bnRvIDUgKTsKCQkKCWVuZCBpZjsgLS0gcmlzaW5nX2VkZ2UoIGNsb2NrICkKCQplbmQgcHJvY2VzczsKCgoKZW5kIGJlaGF2aW9yOwo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "TMDS_encoder.vhd",
			"settings":
			{
				"buffer_size": 4194,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAAYhAAAAAAAABiEAAALS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBFbmdpbmVlcjogTWlrZSBGaWVsZCA8aGFtc3RlckBzbmFwLm5ldC5uej4KLS0gCi0tIERlc2NyaXB0aW9uOiBURE1TIEVuY29kZXIgCi0tICAgICA4IGJpdHMgY29sb3VyLCAyIGNvbnRyb2wgYml0cyBhbmQgb25lIGJsYW5raW5nIGJpdHMgaW4KLS0gICAgICAgMTAgYml0cyBvZiBURE1TIGVuY29kZWQgZGF0YSBvdXQKLS0gICAgIENsb2NrZWQgYXQgdGhlIHBpeGVsIGNsb2NrCi0tCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KbGlicmFyeSBJRUVFOwp1c2UgSUVFRS5TVERfTE9HSUNfMTE2NC5BTEw7CnVzZSBJRUVFLlNURF9MT0dJQ19VTlNJR05FRC5BTEw7CgplbnRpdHkgVERNU19lbmNvZGVyIGlzCiAgICBQb3J0ICggY2xrICAgICA6IGluICBTVERfTE9HSUM7CiAgICAgICAgICAgZGF0YSAgICA6IGluICBTVERfTE9HSUNfVkVDVE9SICg3IGRvd250byAwKTsKICAgICAgICAgICBjICAgICAgIDogaW4gIFNURF9MT0dJQ19WRUNUT1IgKDEgZG93bnRvIDApOwogICAgICAgICAgIGJsYW5rICAgOiBpbiAgU1REX0xPR0lDOwogICAgICAgICAgIGVuY29kZWQgOiBvdXQgIFNURF9MT0dJQ19WRUNUT1IgKDkgZG93bnRvIDApKTsKZW5kIFRETVNfZW5jb2RlcjsKCmFyY2hpdGVjdHVyZSBCZWhhdmlvcmFsIG9mIFRETVNfZW5jb2RlciBpcwogICBzaWduYWwgeG9yZWQgIDogU1REX0xPR0lDX1ZFQ1RPUiAoOCBkb3dudG8gMCk7CiAgIHNpZ25hbCB4bm9yZWQgOiBTVERfTE9HSUNfVkVDVE9SICg4IGRvd250byAwKTsKICAgCiAgIHNpZ25hbCBvbmVzICAgICAgICAgICAgICAgIDogU1REX0xPR0lDX1ZFQ1RPUiAoMyBkb3dudG8gMCk7CiAgIHNpZ25hbCBkYXRhX3dvcmQgICAgICAgICAgIDogU1REX0xPR0lDX1ZFQ1RPUiAoOCBkb3dudG8gMCk7CiAgIHNpZ25hbCBkYXRhX3dvcmRfaW52ICAgICAgIDogU1REX0xPR0lDX1ZFQ1RPUiAoOCBkb3dudG8gMCk7CiAgIHNpZ25hbCBkYXRhX3dvcmRfZGlzcGFyaXR5IDogU1REX0xPR0lDX1ZFQ1RPUiAoMyBkb3dudG8gMCk7CiAgIHNpZ25hbCBkY19iaWFzICAgICAgICAgICAgIDogU1REX0xPR0lDX1ZFQ1RPUiAoMyBkb3dudG8gMCkgOj0gKG90aGVycyA9PiAnMCcpOwpiZWdpbgogICAtLSBXb3JrIG91ciB0aGUgdHdvIGRpZmZlcmVudCBlbmNvZGluZ3MgZm9yIHRoZSBieXRlCiAgIHhvcmVkKDApIDw9IGRhdGEoMCk7CiAgIHhvcmVkKDEpIDw9IGRhdGEoMSkgeG9yIHhvcmVkKDApOwogICB4b3JlZCgyKSA8PSBkYXRhKDIpIHhvciB4b3JlZCgxKTsKICAgeG9yZWQoMykgPD0gZGF0YSgzKSB4b3IgeG9yZWQoMik7CiAgIHhvcmVkKDQpIDw9IGRhdGEoNCkgeG9yIHhvcmVkKDMpOwogICB4b3JlZCg1KSA8PSBkYXRhKDUpIHhvciB4b3JlZCg0KTsKICAgeG9yZWQoNikgPD0gZGF0YSg2KSB4b3IgeG9yZWQoNSk7CiAgIHhvcmVkKDcpIDw9IGRhdGEoNykgeG9yIHhvcmVkKDYpOwogICB4b3JlZCg4KSA8PSAnMSc7CgogICB4bm9yZWQoMCkgPD0gZGF0YSgwKTsKICAgeG5vcmVkKDEpIDw9IGRhdGEoMSkgeG5vciB4bm9yZWQoMCk7CiAgIHhub3JlZCgyKSA8PSBkYXRhKDIpIHhub3IgeG5vcmVkKDEpOwogICB4bm9yZWQoMykgPD0gZGF0YSgzKSB4bm9yIHhub3JlZCgyKTsKICAgeG5vcmVkKDQpIDw9IGRhdGEoNCkgeG5vciB4bm9yZWQoMyk7CiAgIHhub3JlZCg1KSA8PSBkYXRhKDUpIHhub3IgeG5vcmVkKDQpOwogICB4bm9yZWQoNikgPD0gZGF0YSg2KSB4bm9yIHhub3JlZCg1KTsKICAgeG5vcmVkKDcpIDw9IGRhdGEoNykgeG5vciB4bm9yZWQoNik7CiAgIHhub3JlZCg4KSA8PSAnMCc7CiAgIAogICAtLSBDb3VudCBob3cgbWFueSBvbmVzIGFyZSBzZXQgaW4gZGF0YQogICBvbmVzIDw9ICIwMDAwIiArIGRhdGEoMCkgKyBkYXRhKDEpICsgZGF0YSgyKSArIGRhdGEoMykKICAgICAgICAgICAgICAgICAgICsgZGF0YSg0KSArIGRhdGEoNSkgKyBkYXRhKDYpICsgZGF0YSg3KTsKIAogICAtLSBEZWNpZGUgd2hpY2ggZW5jb2RpbmcgdG8gdXNlCiAgIHByb2Nlc3Mob25lcywgZGF0YSgwKSwgeG5vcmVkLCB4b3JlZCkKICAgYmVnaW4KICAgICAgaWYgb25lcyA+IDQgb3IgKG9uZXMgPSA0IGFuZCBkYXRhKDApID0gJzAnKSB0aGVuCiAgICAgICAgIGRhdGFfd29yZCAgICAgPD0geG5vcmVkOwogICAgICAgICBkYXRhX3dvcmRfaW52IDw9IE5PVCh4bm9yZWQpOwogICAgICBlbHNlCiAgICAgICAgIGRhdGFfd29yZCAgICAgPD0geG9yZWQ7CiAgICAgICAgIGRhdGFfd29yZF9pbnYgPD0gTk9UKHhvcmVkKTsKICAgICAgZW5kIGlmOwogICBlbmQgcHJvY2VzczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgIC0tIFdvcmsgb3V0IHRoZSBEQyBiaWFzIG9mIHRoZSBkYXRhd29yZDsKICAgZGF0YV93b3JkX2Rpc3Bhcml0eSAgPD0gIjExMDAiICsgZGF0YV93b3JkKDApICsgZGF0YV93b3JkKDEpICsgZGF0YV93b3JkKDIpICsgZGF0YV93b3JkKDMpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGRhdGFfd29yZCg0KSArIGRhdGFfd29yZCg1KSArIGRhdGFfd29yZCg2KSArIGRhdGFfd29yZCg3KTsKICAgCiAgIC0tIE5vdyB3b3JrIG91dCB3aGF0IHRoZSBvdXRwdXQgc2hvdWxkIGJlCiAgIHByb2Nlc3MoY2xrKQogICBiZWdpbgogICAgICBpZiByaXNpbmdfZWRnZShjbGspIHRoZW4KICAgICAgICAgaWYgYmxhbmsgPSAnMScgdGhlbiAKICAgICAgICAgICAgLS0gSW4gdGhlIGNvbnRyb2wgcGVyaW9kcywgYWxsIHZhbHVlcyBoYXZlIGFuZCBoYXZlIGJhbGFuY2VkIGJpdCBjb3VudAogICAgICAgICAgICBjYXNlIGMgaXMgICAgICAgICAgICAKICAgICAgICAgICAgICAgd2hlbiAiMDAiICAgPT4gZW5jb2RlZCA8PSAiMTEwMTAxMDEwMCI7CiAgICAgICAgICAgICAgIHdoZW4gIjAxIiAgID0+IGVuY29kZWQgPD0gIjAwMTAxMDEwMTEiOwogICAgICAgICAgICAgICB3aGVuICIxMCIgICA9PiBlbmNvZGVkIDw9ICIwMTAxMDEwMTAwIjsKICAgICAgICAgICAgICAgd2hlbiBvdGhlcnMgPT4gZW5jb2RlZCA8PSAiMTAxMDEwMTAxMSI7CiAgICAgICAgICAgIGVuZCBjYXNlOwogICAgICAgICAgICBkY19iaWFzIDw9IChvdGhlcnMgPT4gJzAnKTsKICAgICAgICAgZWxzZQogICAgICAgICAgICBpZiBkY19iaWFzID0gIjAwMDAwIiBvciBkYXRhX3dvcmRfZGlzcGFyaXR5ID0gMCB0aGVuCiAgICAgICAgICAgICAgIC0tIGRhdGF3b3JkIGhhcyBubyBkaXNwYXJpdHkKICAgICAgICAgICAgICAgaWYgZGF0YV93b3JkKDgpID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgICAgZW5jb2RlZCA8PSAiMDEiICYgZGF0YV93b3JkKDcgZG93bnRvIDApOwogICAgICAgICAgICAgICAgICBkY19iaWFzIDw9IGRjX2JpYXMgKyBkYXRhX3dvcmRfZGlzcGFyaXR5OwogICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgIGVuY29kZWQgPD0gIjEwIiAmIGRhdGFfd29yZF9pbnYoNyBkb3dudG8gMCk7CiAgICAgICAgICAgICAgICAgIGRjX2JpYXMgPD0gZGNfYmlhcyAtIGRhdGFfd29yZF9kaXNwYXJpdHk7CiAgICAgICAgICAgICAgIGVuZCBpZjsKICAgICAgICAgICAgZWxzaWYgKGRjX2JpYXMoMykgPSAnMCcgYW5kIGRhdGFfd29yZF9kaXNwYXJpdHkoMykgPSAnMCcpIG9yIAogICAgICAgICAgICAgICAgICAoZGNfYmlhcygzKSA9ICcxJyBhbmQgZGF0YV93b3JkX2Rpc3Bhcml0eSgzKSA9ICcxJykgdGhlbgogICAgICAgICAgICAgICBlbmNvZGVkIDw9ICcxJyAmIGRhdGFfd29yZCg4KSAmIGRhdGFfd29yZF9pbnYoNyBkb3dudG8gMCk7CiAgICAgICAgICAgICAgIGRjX2JpYXMgPD0gZGNfYmlhcyArIGRhdGFfd29yZCg4KSAtIGRhdGFfd29yZF9kaXNwYXJpdHk7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgZW5jb2RlZCA8PSAnMCcgJiBkYXRhX3dvcmQ7CiAgICAgICAgICAgICAgIGRjX2JpYXMgPD0gZGNfYmlhcyAtIGRhdGFfd29yZF9pbnYoOCkgKyBkYXRhX3dvcmRfZGlzcGFyaXR5OwogICAgICAgICAgICBlbmQgaWY7CiAgICAgICAgIGVuZCBpZjsKICAgICAgZW5kIGlmOwogICBlbmQgcHJvY2VzczsgICAgICAKZW5kIEJlaGF2aW9yYWw7",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "usbHost.vhd",
			"settings":
			{
				"buffer_size": 9239,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pixelAlpha.vhd",
			"settings":
			{
				"buffer_size": 1844,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAANAcAAAAAAAB4BgAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CgplbnRpdHkgcGl4ZWxBbHBoYSBpcwoKcG9ydCgKCS0tcmVzZXQKCSByZXNldDogICAgICAgICAgICAgICAgICAgICAgICAgIGluICBzdGRfbG9naWM7CiAgICBjbG9jazogICAgICAgICAgICAgICAgICAgICAgICAgIGluICBzdGRfbG9naWM7CgkgCSAKCSBjb2xvckluQToJCQkJCQkJCWluICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoJIGNvbG9ySW5COgkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgkgYWxwaGE6CQkJCQkJCQkJaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDQgZG93bnRvIDAgKTsKCSBjb2xvck91dDoJCQkJCQkJCW91dCBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApCik7CgplbmQgcGl4ZWxBbHBoYTsKCmFyY2hpdGVjdHVyZSBiZWhhdmlvciBvZiBwaXhlbEFscGhhIGlzCgoKYmVnaW4KCm1haW46IHByb2Nlc3MoIGFsbCApCgp2YXJpYWJsZSBtdWxBUjoJc3RkX2xvZ2ljX3ZlY3RvciggOSBkb3dudG8gMCApOwp2YXJpYWJsZSBtdWxBRzoJc3RkX2xvZ2ljX3ZlY3RvciggOSBkb3dudG8gMCApOwp2YXJpYWJsZSBtdWxBQjoJc3RkX2xvZ2ljX3ZlY3RvciggOSBkb3dudG8gMCApOwoKdmFyaWFibGUgbXVsQlI6CXN0ZF9sb2dpY192ZWN0b3IoIDkgZG93bnRvIDAgKTsKdmFyaWFibGUgbXVsQkc6CXN0ZF9sb2dpY192ZWN0b3IoIDkgZG93bnRvIDAgKTsKdmFyaWFibGUgbXVsQkI6CXN0ZF9sb2dpY192ZWN0b3IoIDkgZG93bnRvIDAgKTsKCnZhcmlhYmxlIGJldGE6CQlzdGRfbG9naWNfdmVjdG9yKCA0IGRvd250byAwICk7Cgp2YXJpYWJsZSBvdXRSOgkJc3RkX2xvZ2ljX3ZlY3RvciggNCBkb3dudG8gMCApOwp2YXJpYWJsZSBvdXRHOgkJc3RkX2xvZ2ljX3ZlY3RvciggNCBkb3dudG8gMCApOwp2YXJpYWJsZSBvdXRCOgkJc3RkX2xvZ2ljX3ZlY3RvciggNCBkb3dudG8gMCApOwoKYmVnaW4KCglpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCgkKCQliZXRhCTo9IG5vdCBhbHBoYTsKCQkKCQoJCW11bEFSIDo9CWNvbG9ySW5BKCA0IGRvd250byAwICkgCQkqIGFscGhhOwoJCW11bEFHIDo9CWNvbG9ySW5BKCAxMCBkb3dudG8gNiApIAkqIGFscGhhOwoJCW11bEFCIDo9CWNvbG9ySW5BKCAxNSBkb3dudG8gMTEgKQkqIGFscGhhOwoJCQoJCW11bEJSIDo9CWNvbG9ySW5CKCA0IGRvd250byAwICkgCQkqIGJldGE7CgkJbXVsQkcgOj0JY29sb3JJbkIoIDEwIGRvd250byA2ICkgCSogYmV0YTsKCQltdWxCQiA6PQljb2xvckluQiggMTUgZG93bnRvIDExICkJKiBiZXRhOwoKCQkKCQlvdXRSIDo9IG11bEFSKCA5IGRvd250byA1ICkgKyBtdWxCUiggOSBkb3dudG8gNSApOwoJCW91dEcgOj0gbXVsQUcoIDkgZG93bnRvIDUgKSArIG11bEJHKCA5IGRvd250byA1ICk7CgkJb3V0QiA6PSBtdWxBQiggOSBkb3dudG8gNSApICsgbXVsQkIoIDkgZG93bnRvIDUgKTsKCQkKCQkKCQljb2xvck91dCA8PSBvdXRCICYgb3V0RyAmICIwIiAmIG91dFI7CgkJCgllbmQgaWY7IC0tIHJpc2luZ19lZGdlKCBjbG9jayApCgkKZW5kIHByb2Nlc3M7CgoKCmVuZCBiZWhhdmlvcjsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pixelGenGfx.vhd",
			"settings":
			{
				"buffer_size": 13127,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pixelGenTxt.vhd",
			"settings":
			{
				"buffer_size": 25551,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "fpAlu.vhd",
			"settings":
			{
				"buffer_size": 5861,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"AQAAAAAAAAAAAAAA5RYAAAAAAAAsEAAAbGlicmFyeSBpZWVlOwp1c2UgaWVlZS5zdGRfbG9naWNfMTE2NC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY19hcml0aC5hbGw7CnVzZSBJRUVFLnN0ZF9sb2dpY191bnNpZ25lZC5hbGw7CgpsaWJyYXJ5IGFsdGVyYV9tZjsKdXNlIGFsdGVyYV9tZi5hbHRlcmFfbWZfY29tcG9uZW50cy5hbGw7CgplbnRpdHkgZnBBbHUgaXMKCnBvcnQoCglyZXNldDoJCWluICAJc3RkX2xvZ2ljOwoJY2xvY2s6CQlpbiAgCXN0ZF9sb2dpYzsKCWE6CQkJCWluIAlzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoJZGluOgkJCWluIAlzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwoJZG91dDoJCQlvdXQJc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCQoJY2U6CQkJaW4JCXN0ZF9sb2dpYzsKCXdyOgkJCWluCQlzdGRfbG9naWM7CglkYXRhTWFzazoJaW4JCXN0ZF9sb2dpY192ZWN0b3IoIDMgZG93bnRvIDAgKTsKCQoJcmVhZHk6CQlvdXQJc3RkX2xvZ2ljCik7CgplbmQgZnBBbHU7CgphcmNoaXRlY3R1cmUgYmVoYXZpb3Igb2YgZnBBbHUgaXMKCmNvbXBvbmVudCBmcE11bHQgaXMKcG9ydCggCgkJIGNsb2NrCToJSU4gIFNURF9MT0dJQzsKCQkgZGF0YWEJOglJTiAgU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApOwoJCSBkYXRhYgk6CUlOICBTVERfTE9HSUNfVkVDVE9SICgzMSBET1dOVE8gMCk7CgkJIHJlc3VsdAk6CU9VVCAgU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApCgkgKTsgCmVuZCBjb21wb25lbnQ7CiAKY29tcG9uZW50IGZwQWRkIGlzIApwb3J0KAoJCSBjbG9jawk6CUlOICBTVERfTE9HSUM7CgkJIGRhdGFhCToJSU4gIFNURF9MT0dJQ19WRUNUT1IgKDMxIERPV05UTyAwKTsKCQkgZGF0YWIJOglJTiAgU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApOwoJCSByZXN1bHQJOglPVVQgIFNURF9MT0dJQ19WRUNUT1IgKDMxIERPV05UTyAwKQoJKTsKZW5kIGNvbXBvbmVudDsKCmNvbXBvbmVudCBmcFN1YiBpcyAKcG9ydCgKCQkgY2xvY2sJOglJTiAgU1REX0xPR0lDOwoJCSBkYXRhYQk6CUlOICBTVERfTE9HSUNfVkVDVE9SICgzMSBET1dOVE8gMCk7CgkJIGRhdGFiCToJSU4gIFNURF9MT0dJQ19WRUNUT1IgKDMxIERPV05UTyAwKTsKCQkgcmVzdWx0CToJT1VUICBTVERfTE9HSUNfVkVDVE9SICgzMSBET1dOVE8gMCkKCSk7CmVuZCBjb21wb25lbnQ7Cgpjb21wb25lbnQgZnBEaXYgaXMKcG9ydAoJKAoJCWNsb2NrCQk6IElOIFNURF9MT0dJQyA7CgkJZGF0YWEJCTogSU4gU1REX0xPR0lDX1ZFQ1RPUiAoMzEgRE9XTlRPIDApOwoJCWRhdGFiCQk6IElOIFNURF9MT0dJQ19WRUNUT1IgKDMxIERPV05UTyAwKTsKCQlyZXN1bHQJCTogT1VUIFNURF9MT0dJQ19WRUNUT1IgKDMxIERPV05UTyAwKQoJKTsKRU5EIGNvbXBvbmVudDsKCnR5cGUgZnBBbHVSZWdTdGF0ZV9UIGlzICggZmFyc1dhaXRGb3JSZWdBY2Nlc3MsIGZhcnNXYWl0Rm9yQnVzQ3ljbGVFbmQgKTsKCnNpZ25hbAlzdGF0ZToJCQlmcEFsdVJlZ1N0YXRlX1Q7CgpzaWduYWwJZnBBOgkJCQlzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwpzaWduYWwJZnBCOgkJCQlzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwpzaWduYWwJZnBBZGRSZXN1bHQ6CXN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CnNpZ25hbAlmcFN1YlJlc3VsdDoJc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsCWZwTXVsUmVzdWx0OglzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwpzaWduYWwJZnBEaXZSZXN1bHQ6CXN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CgpiZWdpbgoKZnBNdWx0SW5zdDogZnBNdWx0CnBvcnQgbWFwKAoKCWNsb2NrIAk9PiBjbG9jaywKCWRhdGFhCQk9PiBmcEEsCglkYXRhQgkJPT4gZnBCLAoJcmVzdWx0CT0+IGZwTXVsUmVzdWx0CgopOwoKZnBBZGRJbnN0OiBmcEFkZApwb3J0IG1hcCgKCgljbG9jayAJPT4gY2xvY2ssCglkYXRhYQkJPT4gZnBBLAoJZGF0YUIJCT0+IGZwQiwKCXJlc3VsdAk9PiBmcEFkZFJlc3VsdAoKKTsKCmZwU3ViSW5zdDogZnBTdWIKcG9ydCBtYXAoCgoJY2xvY2sgCT0+IGNsb2NrLAoJZGF0YWEJCT0+IGZwQSwKCWRhdGFCCQk9PiBmcEIsCglyZXN1bHQJPT4gZnBTdWJSZXN1bHQKCik7CgpmcERpdkluc3Q6IGZwRGl2CnBvcnQgbWFwKAoKCWNsb2NrIAk9PiBjbG9jaywKCWRhdGFhCQk9PiBmcEEsCglkYXRhQgkJPT4gZnBCLAoJcmVzdWx0CT0+IGZwRGl2UmVzdWx0CgopOwoKCglmcEFsdU1haW46IHByb2Nlc3MoIGFsbCApCgliZWdpbgoKCQlpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCgkJCgkJCWlmIHJlc2V0ID0gJzEnIHRoZW4KCQkJCgkJCQlyZWFkeQk8PSAnMCc7CQoJCQkJc3RhdGUJPD0gZmFyc1dhaXRGb3JSZWdBY2Nlc3M7CgkJCQkKCQkJZWxzZQoJCQkKCQkJCWNhc2Ugc3RhdGUgaXMKCQkKCQkJCQl3aGVuIGZhcnNXYWl0Rm9yUmVnQWNjZXNzID0+CgkJCQkKCQkJCQkJaWYgY2UgPSAnMScgdGhlbgoJCQkJCQkKCQkJCQkJCS0tY3B1IHdhbnRzIHRvIGFjY2VzcyByZWdpc3RlcnMKCQkJCQkJCgkJCQkJCQlyZWFkeSA8PSAnMCc7CgkJCQkJCQkKCQkJCQkJCWNhc2UgYSggNyBkb3dudG8gMCApIGlzCgkJCQkJCQkKCQkJCQkJCQktLTB4MDAgcncgZnBBCQkJCQkJCQkKCQkJCQkJCQl3aGVuIHgiMDAiID0+CgkJCQkJCQkJCgkJCQkJCQkJCWRvdXQJPD0gZnBBOwoJCQkJCQkJCQkKCQkJCQkJCQkJaWYgd3IgPSAnMScgdGhlbgoJCQkJCQkJCQkKCQkJCQkJCQkJCWZwQSA8PSBkaW47CgkJCQkJCQkJCQkKCQkJCQkJCQkJZW5kIGlmOwoKCQkJCQkJCQkJcmVhZHkJPD0gJzEnOwoJCQkJCQkJCQkKCQkJCQkJCQktLTB4MDQgcncgZnBCCgkJCQkJCQkJd2hlbiB4IjAxIiA9PgoJCQkJCQkJCQoJCQkJCQkJCQlkb3V0CTw9IGZwQjsKCQkJCQkJCQkJCgkJCQkJCQkJCWlmIHdyID0gJzEnIHRoZW4KCQkJCQkJCQkJCgkJCQkJCQkJCQlmcEIgPD0gZGluOwoJCQkJCQkJCQkJCgkJCQkJCQkJCWVuZCBpZjsKCgkJCQkJCQkJCXJlYWR5CTw9ICcxJzsKCQkJCQkJCQkKCQkJCQkJCQktLTB4MDggci0gZnBBZGRSZXN1bHQKCQkJCQkJCQl3aGVuIHgiMDIiID0+CgkJCQkJCQkJCgkJCQkJCQkJCWRvdXQJPD0gZnBBZGRSZXN1bHQ7CgkJCQkJCQkJCgkJCQkJCQkJCXJlYWR5CTw9ICcxJzsKCgkJCQkJCQkJLS0weDBjIHItIGZwU3ViUmVzdWx0CgkJCQkJCQkJd2hlbiB4IjAzIiA9PgoJCQkJCQkJCQoJCQkJCQkJCQlkb3V0CTw9IGZwU3ViUmVzdWx0OwoJCQkJCQkJCQoJCQkJCQkJCQlyZWFkeQk8PSAnMSc7CgoJCQkJCQkJCS0tMHgxMCByLSBmcE11bFJlc3VsdAoJCQkJCQkJCXdoZW4geCIwNCIgPT4KCQkJCQkJCQkKCQkJCQkJCQkJZG91dAk8PSBmcE11bFJlc3VsdDsKCQkJCQkJCQkKCQkJCQkJCQkJcmVhZHkJPD0gJzEnOwoKCQkJCQkJCQktLTB4MTQgci0gZnBEaXZSZXN1bHQKCQkJCQkJCQl3aGVuIHgiMDUiID0+CgkJCQkJCQkJCgkJCQkJCQkJCWRvdXQJPD0gZnBEaXZSZXN1bHQ7CgkJCQkJCQkJCgkJCQkJCQkJCXJlYWR5CTw9ICcxJzsKCgoJCQkJCQkJCXdoZW4gb3RoZXJzID0+CgkJCQkJCQkJCgkJCQkJCQkJCWRvdXQJPD0gKCBvdGhlcnMgPT4nMCcgKTsKCQkJCQkJCQkJcmVhZHkJPD0gJzEnOwoJCQkJCQkJCgkJCQkJCQllbmQgY2FzZTsgLS1hCgkJCQkJCQoJCQkJCQkJc3RhdGUgPD0gZmFyc1dhaXRGb3JCdXNDeWNsZUVuZDsKCQkJCQkJCgkJCQkJCWVuZCBpZjsgLS1jZSA9ICcxJwoJCQkJCQkJCQkKCQkJCQkKCQkJCQl3aGVuIGZhcnNXYWl0Rm9yQnVzQ3ljbGVFbmQgPT4KCQkJCQkKCQkJCQkJLS13YWl0IGZvciBidXMgY3ljbGUgdG8gZW5kCgkJCQkJCWlmIGNlID0gJzAnIHRoZW4KCQkJCQkJCgkJCQkJCQlzdGF0ZSA8PSBmYXJzV2FpdEZvclJlZ0FjY2VzczsKCQkJCQkJCXJlYWR5CTw9ICcwJzsKCQkJCQkJCQoJCQkJCQllbmQgaWY7CgkJCQkJCQoJCQkJCXdoZW4gb3RoZXJzID0+CgkJCQkJCgkJCQkJCXN0YXRlIDw9IGZhcnNXYWl0Rm9yUmVnQWNjZXNzOwoJCQkJCgkJCQllbmQgY2FzZTsgLS1zdGF0ZQoJCQoJCQllbmQgaWY7IC0tcmVzZXQgPSAnMScKCQkKCQkKCQkKCQllbmQgaWY7IC0tcmlzaW5nX2VkZ2UoIGNsb2NrICkKCQoKCWVuZCBwcm9jZXNzOwoKCmVuZCBiZWhhdmlvcjsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "uart.vhd",
			"settings":
			{
				"buffer_size": 16747,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"expand_tabs",
					{
						"set_translate_tabs": true
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/User/make send.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package control: install package",
				"Package Control: Install Package"
			],
			[
				"install package control",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 141.0,
		"history":
		[
			"help",
			"dir",
			"dire"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13"
	],
	"file_history":
	[
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/diskio.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/diskio.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/C4RiscVSOCTop.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/osUIEvents.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/usbHID.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfFont.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfFont.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfDrawing.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfJPEG.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfBitmap.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfDrawing.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/main.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/picojpeg.cpp",
		"/C/Users/qubec/AppData/Roaming/Sublime Text/Packages/User/make send.sublime-build",
		"/C/Users/qubec/AppData/Roaming/Sublime Text/Packages/User/Preferences.sublime-settings",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/slideshowProject.sublime-project",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/usbHidTest/main.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"bsp",
			"usbhost",
			"bsp",
			"unused5",
			"\n}",
			"//#",
			"float"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "C4RiscVSOCTop.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49230,
						"regions":
						{
						},
						"selection":
						[
							[
								443,
								443
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 627.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "dvid.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4266,
						"regions":
						{
						},
						"selection":
						[
							[
								3550,
								3550
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1824.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "gouraudEdge.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1659,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "gouraudIterator.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1363,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "gouraudIterator16.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1373,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "gouraudWeight.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1493,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "InputSync.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1166,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "spi.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8330,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "sramController.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20425,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "textureShader.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1220,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "TMDS_encoder.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4194,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "usbHost.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9239,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "pixelAlpha.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1844,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "pixelGenGfx.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13127,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "pixelGenTxt.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25551,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "fpAlu.vhd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5861,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "uart.vhd",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16747,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 191.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "C4RiscVSOC.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\qubec\\Documents\\Development\\ProjektyVHDL\\C4BaseBoard\\RiscVSOCQ13\\software\\shell\\shell.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 242.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
